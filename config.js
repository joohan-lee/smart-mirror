/* Magic Mirror Config Sample
 *
 * By Michael Teeuw http://michaelteeuw.nl
 * MIT Licensed.
 *
 * For more information on how you can configure this file
 * See https://github.com/MichMich/MagicMirror#configuration
 *
 */

var config = {
	address: "localhost", // Address to listen on, can be:
	                      // - "localhost", "127.0.0.1", "::1" to listen on loopback interface
	                      // - another specific IPv4/6 to listen on a specific interface
	                      // - "0.0.0.0", "::" to listen on any interface
	                      // Default, when address config is left out or empty, is "localhost"
	electronOptions:{
		webPreferences:{
			webviewTag: true
		}
	},
	port: 8080,
	ipWhitelist: ["127.0.0.1", "::ffff:127.0.0.1", "::1"], // Set [] to allow all IP addresses
	                                                       // or add a specific IPv4 of 192.168.1.5 :
	                                                       // ["127.0.0.1", "::ffff:127.0.0.1", "::1", "::ffff:192.168.1.5"],
	                                                       // or IPv4 range of 192.168.3.0 --> 192.168.3.15 use CIDR format :
	                                                       // ["127.0.0.1", "::ffff:127.0.0.1", "::1", "::ffff:192.168.3.0/28"],

	useHttps: false, 		// Support HTTPS or not, default "false" will use HTTP
	httpsPrivateKey: "", 	// HTTPS private key path, only require when useHttps is true
	httpsCertificate: "", 	// HTTPS Certificate path, only require when useHttps is true

	language: "ko",
	timeFormat: 24,
	units: "metric",
	// serverOnly:  true/false/"local" ,
			     // local for armv6l processors, default
			     //   starts serveronly and then starts chrome browser
			     // false, default for all  NON-armv6l devices
			     // true, force serveronly mode, because you want to.. no UI on this device

	modules: [
		{
			module: "alert",
		},
		{
			module: "updatenotification",
			position: "top_bar"
		},
		{
			module: "clock",
			position: "top_left"
		},
		/*{
			module: "calendar",
			header: "대한민국 공휴일",
			position: "top_left",
			config: {
				calendars: [
					{
						//symbol: "calendar-check",
						url: 'https://calendar.google.com/calendar/ical/ko.south_korea%23holiday%40group.v.calendar.google.com/public/basic.ics',
						symbol: 'calendar-check',
						//url: "https://www.googleapis.com/calendar/v3/calendars/${calendarID}/events?orderBy=startTime&singleEvents=true&timeMax=2020-06-10T00:00:00Z&timeMin=2020-06-01T00:00:00Z&key=AIzaSyBQ8ZfwQiSLCimFQcfgdZNJPtOVqPScnPk"
						//url: "webcal://www.calendarlabs.com/ical-calendar/ics/76/US_Holidays.ics"					
					}
						
				]
			}
		},*/
		{
			module: "compliments",
			position: "lower_third"
		},
		{
			module: "currentweather",
			position: "top_right",
			config: {
				location: "Seoul, KR",
				locationID: "1835847", //ID from http://bulk.openweathermap.org/sample/city.list.json.gz; unzip the gz file and find your city
				appid: "ae5f846c94d969fc3241c8bd590574e9"
			}
		},
		{
			module: "weatherforecast",
			position: "top_right",
			header: "Weather Forecast",
			config: {
				location: "Seoul, KR",
				locationID: "1835847", //ID from http://bulk.openweathermap.org/sample/city.list.json.gz; unzip the gz file and find your city
				appid: "ae5f846c94d969fc3241c8bd590574e9"
			}
		},
		{
			module: "newsfeed",
			position: "bottom_bar",
			config: {
				feeds: [
					{
						title: "JTBC News",
						url: "http://fs.jtbc.joins.com//RSS/newsflash.xml"
					}
				],
				showSourceTitle: true,
				showPublishDate: true,
				broadcastNewsFeeds: true,
				broadcastNewsUpdates: true
			}
		},
		/*
		//MMM-SmartTouch
		{
			module: 'MMM-SmartTouch',
			position: 'bottom_center',    // This can be any of the regions.(bottom-center Recommended)
			config: {
			// The config property is optional.
				refreshInterval: 1
			}
		},
		*/

		//MMM-GoogleAssistant module
		{
			module: "MMM-GoogleAssistant",
			position: "fullscreen_above",
			config: {
				debug: false,
				assistantConfig: {
					lang: "ko-KR",
					projectId: "cos-assitant", // Required to use gaction.
					modelId: "cos-assitant-cos-assistant-949dbj", // (OPTIONAL for gaction)
					instanceId: "yonseiMirror", // (OPTIONAL for gaction)
				  
		},
    responseConfig: {
      useScreenOutput: true,
      screenOutputCSS: "screen_output.css",
      screenOutputTimer: 5000,
      activateDelay: 250,
      useAudioOutput: true,
      useChime: true,
      newChime: false
    },
    micConfig: { // put there configuration generated by auto-installer
      recorder: "arecord",
      device: "plughw:1",
    },
    customActionConfig: {
      autoMakeAction: false,
      autoUpdateAction: false, // in RPI, gaction CLI might have some trouble.(current version should be 2.2.4, but for linux-arm, Google haven't updated) so leave this as false in RPI. I don't know it is solved or not.
      actionLocale: "ko-KR", // At this moment, multi-languages are not supported, sorry. Someday I'll work.
    },
    snowboy: {
      audioGain: 2.0,
      Frontend: false,
      Model: "smart_mirror",
      Sensitivity: 0.7
    },
    debug: false,
    A2DServer: {
      useA2D: true,
      stopCommand: "stop"
    },
    /*recipes: [ "Reboot-Restart-Shutdown.js" ]*/
  }
},
	//MMM-Assistant2Display
	{
		module: "MMM-Assistant2Display",
		position: "top_left",
		config: {
			debug:false,
			useYoutube: true,
			links: {
			useLinks: true,
			displayDelay: 15 * 1000,
			scrollStep: 7,
			scrollInterval: 100,
			scrollStart: 5000,
			scrollActivate: true,
			verbose: false
			},
			photos: {
			  usePhotos: true,
			  displayDelay: 5 * 1000
			},
			volume: {
			  useVolume: true,
			  volumePreset: "ALSA",
			  myScript: null//"amixer sset -M 'master' #VOLUME#%"
			},
			briefToday: {
			  useBriefToday: false,
			  welcome: "brief Today"
			},
			screen: {
			  useScreen: false,
			  delay: 5 * 60 * 1000,
			  turnOffDisplay: true,
			  ecoMode: true,
			  displayCounter: true,
			  displayBar: false,
			  displayStyle: "Text",
			  text: "Auto Turn Off Screen:",
			  detectorSleeping: false,
			  governorSleeping: false,
			  rpi4: false
			},
			pir: {
			  usePir: false,
			  gpio: 21,
			  reverseValue: false
			},
			governor: {
			  useGovernor: false,
			  sleeping: "powersave",
			  working: "ondemand"
			},
			internet: {
			  useInternet: false,
			  displayPing: false,
			  delay: 2* 60 * 1000,
			  scan: "google.fr",
			  command: "pm2 restart 0",
			  showAlert: true
			},
			TelegramBot: {
			  useTelecastSound: false,
			  TelecastSound: "TelegramBot.ogg"
			},
			cast: {
			  useCast: false,
			  castName: "MagicMirror_A2D",
			  port: 8569
			},
			spotify: {
			  useSpotify: false,
			  connectTo: null,
			  playDelay: 3000,
			  minVolume: 10,
			  maxVolume: 100
			}
		  }
		},
		
	//MMM-AVStock module(AlphaVantage)
	{
		module: "MMM-AVStock",
		position: "top_left", //"bottom_bar" is better for 'mode:ticker'
		config:{
			apiKey : "JND7V66JF4OQAT0N", // https://www.alphavantage.co/
			timeFormat: "YYYY-MM-DD HH:mm:ss",
			symbols : ["aapl", "GOOGL", "005930.KS"],
			alias: ["APPLE", "", "SAMSUNG Electronics"], //Easy name of each symbol. When you use `alias`, the number of symbols and alias should be the same. If value is null or "", symbol string will be used by default.
			tickerDuration: 30, // Ticker will be cycled once per this second.
			chartDays: 90, //For `mode:series`, how much daily data will be taken. (max. 90)
			poolInterval : 1000*5, // (Changed in ver 1.1.0) - Only For Premium Account
			mode : "table", // "table", "ticker", "series"
			decimals: 4, // number o decimals for all values including decimals (prices, price changes, change%...)
			candleSticks : true, //show candle sticks if mode is Series
			coloredCandles : true, //colored bars: red and green for negative and positive candles
			premiumAccount: false, // To change poolInterval, set this to true - Only For Premium Account
		}
	},
	//MMM-GmailFeed
	{
		module: 'MMM-GmailFeed',
		position: 'top_center',
		config: {
			username: 'jhlee9946@gmail.com',
			password: 'jhlee9946',
			updateInterval: 60000,
			maxEmails: 5,
			maxSubjectLength: 40,
			maxFromLength: 15,
			playSound: true
		}
	},
	
	
	//MMM-Volume
	/*
	{
		module: "MMM-Volume",
	    position: "top_left", // It is meaningless. but you should set.
	    config: {
		usePresetScript: "ALSA",
		// When set to `null`, `getVolumeScript` and `setVolumeScript` will be used directly. See the experts section.
		// For available presetScript, See `presetScript{}`

		upDownScale: 5,
		// for VOLUME_UP or VOLUME_DOWN.

		volumeOnStart: 10,
		// If you set this, this volume will be applied on start of MagicMirror

		volumeText: "Vol: #VOLUME#%",
		// Showing volume.

		hideDelay: 20000,
		// After X milliseconds from showing, volume gain-meter will be disappeared.

		fadeDelay: 200,
		// If the volume is restored with a fade effect this time in milliseconds will be waited between to scales

		telegramMessages: {
		  CUR_VOLUME : "Current Volume is *#VOLUME#*.",
		  SET_VOLUME : "Setting Volume to *#VOLUME#*",
		  INVALID : "Invalid parameters. `/vol` or `/vol 0~100` is allowed."
		},

		// Usually You might not need to modify belows; Only for Experts.

		getVolumeScript: ``, //get 0~100
		setVolumeScript: ``, //set 0~100
		// volume control scripts for Other systems. If you set null to `usePresetScript`, these fields will be used instead.

		 presetScript: {
		  "OSX": {
			getVolumeScript: `osascript -e 'output volume of (get volume settings)'`, // get 0~100
			setVolumeScript: `osascript -e 'set volume output volume #VOLUME#'` // set 0~100
		  },
		  "ALSA": {
		    getVolumeScript: `amixer sget 'Master' | awk -F"[][]" '{print ""$2""}' | grep %  | awk '{gsub ( /%/, "" ) ; print}'`,
			setVolumeScript: `amixer sset -M 'Master' #VOLUME#%`,
		  },
		  "HIFIBERRY-DAC": {
			getVolumeScript: `amixer sget 'Digital' | grep -E -o '[[:digit:]]+%' | head -n 1| sed 's/%//g'`, // get 0~100
			setVolumeScript: `amixer sset -M 'Digital' #VOLUME#%`, // set 0~100
		  },
		  "PULSE": {
			getVolumeScript: `amixer get Master  | awk -F"[][]" '{print ""$2""}' | grep %  | awk 'NR==1{print $1}' | awk '{gsub(/%/,"") ; print}'`, // get 0~100
			setVolumeScript: `amixer set Master #VOLUME#% -q`, // set 0~100
		  },
		  "RESPEAKER_SPEAKER": {
			getVolumeScript: `amixer -M sget Speaker | grep -E -o '[[:digit:]]+%' | head -n 1| sed 's/%//g'`, // get 0~100
			setVolumeScript: `amixer -M sset Speaker #VOLUME#%`, // set 0~100
		  },
		  "RESPEAKER_PLAYBACK": {
			getVolumeScript: `amixer -M sget Playback | grep -E -o '[[:digit:]]+%' | head -n 1| sed 's/%//g'`, // get 0~100
			setVolumeScript: `amixer -M sset Playback #VOLUME#%`, // set 0~100
		  },
		},


		notifications: {
		  VOLUME_GET : "VOLUME_GET",
		  VOLUME_SET : "VOLUME_SET",
		  VOLUME_UP : "VOLUME_UP",
		  VOLUME_DOWN: "VOLUME_DOWN",
		  VOLUME_STORE : "VOLUME_STORE",
		  VOLUME_RESTORE : "VOLUME_RESTORE",
		  VOLUME_TOGGLE : "VOLUME_TOGGLE",
		  CURRENT_VOLUME : "CURRENT_VOLUME",
		},
		// You can redefine notifications if you need.
	  }
	},
	*/
	/*
	//mm-music-player
	{
		module: 'mm-music-player',
		position: 'bottom_left',
		config: {
			startingVolume: 50,
			fadeDuriation: 2000
		}
	},*/

	]

};

/*************** DO NOT EDIT THE LINE BELOW ***************/
if (typeof module !== "undefined") {module.exports = config;}
